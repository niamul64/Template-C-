#include <bits/stdc++.h>
using namespace std;
 
////////////////////////////////////////////////////// merge start
void merge(int arr[], int l, int m, int r)
{
    int i, j, k;
    int n1 = m - l + 1;
    int n2 =  r - m;
 
    int L[n1], R[n2];
 
    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1+ j];
 
 
    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
        {
            arr[k] = L[i];
            i++;
        }
        else
        {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
 
 
    while (i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }
 
 
    while (j < n2)
    {
        arr[k] = R[j];
        j++;
        k++;
    }
}
 
 
void mergeSort(int arr[], int l, int r)
{
    if (l < r)
    {
 
        int m = l+(r-l)/2;
 
 
        mergeSort(arr, l, m);
        mergeSort(arr, m+1, r);
 
        merge(arr, l, m, r);
    }
}
 
////////////////////////////////////////////////////// merge end
 
////////////////////////////////////////////////////// quick start
int partition (int arr[], int low, int high)
{
    int pivot = arr[high];
    int i = (low - 1);
 
    for (int j = low; j <= high- 1; j++)
    {
 
        if (arr[j] <= pivot)
        {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return (i + 1);
}
 
void quickSort(int arr[], int low, int high)
{
    if (low < high)
    {
 
        int pivott = partition(arr, low, high);
 
 
        quickSort(arr, low, pivott - 1);
        quickSort(arr, pivott + 1, high);
    }
}
 
////////////////////////////////////////////////////// quick end
 
void printArray(int arr[], int s)
{
    int i;
    for (i=0; i < s; i++)
        printf("%d ", arr[i]);
    printf("\n");
}
 
 
int main()
{
 
    int n,x;
    cin>>n;
    int arrQ[n],arrMrg[n];
for(int i=0;i<n;i++){
    x=rand();
    arrMrg[i]=x;
    arrQ[i]=x;
}
 
clock_t time_req;
    time_req = clock();
    mergeSort(arrMrg, 0, n - 1);
    time_req = clock() - time_req;
 
    double T=(double)(time_req/CLOCKS_PER_SEC*1000);
printf("time for merge sort: %lf  milliseconds\n",T);
 
 //printArray(arrMrg, n) ;
time_req = clock();
    quickSort(arrQ, 0, n-1);
 
T=(double)(time_req/CLOCKS_PER_SEC*1000);
printf("time for merge sort: %lf  milliseconds\n",T);
   // printArray(arrQ, n) ;
 
    return 0;
}
